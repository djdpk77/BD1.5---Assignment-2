const express = require('express');
const { resolve } = require('path');
let cors = require('cors');

const app = express();
const port = 3010;
app.use(cors());

app.use(express.static('static'));

app.get('/', (req, res) => {
  res.send('Welcome to Stock Portfolio Analysis API');
});

//Function to calculate the returns
function calculateReturns(boughtAt, marketPrice, quantity) {
  let result = (marketPrice - boughtAt) * quantity;

  return result.toString();
}

//Endpoint 1: Calculate the Returns of the Stocks added
app.get('/calculate-returns', (req, res) => {
  let boughtAt = parseFloat(req.query.boughtAt);
  let marketPrice = parseFloat(req.query.marketPrice);
  let quantity = parseInt(req.query.quantity);

  res.send(calculateReturns(boughtAt, marketPrice, quantity));
});

//Function to compute total returns / return percentage generated by all the stocks
function calculateTotalReturns(stock1, stock2, stock3, stock4) {
  let totalReturn = stock1 + stock2 + stock3 + stock4;

  return totalReturn.toString();
}

//Endpoint 2: Calculate the Total Returns
app.get('/total-returns', (req, res) => {
  let stock1 = parseFloat(req.query.stock1);
  let stock2 = parseFloat(req.query.stock2);
  let stock3 = parseFloat(req.query.stock3);
  let stock4 = parseFloat(req.query.stock4);

  res.send(calculateTotalReturns(stock1, stock2, stock3, stock4));
});

//Function to compute the return percentage
function calculateReturnPercentage(boughtAt, returns) {
  let returnPercentage = (returns / boughtAt) * 100;

  return returnPercentage.toString();
}

//Endpoint 3: Calculate the Return Percentage
app.get('/calculate-return-percentage', (req, res) => {
  let boughtAt = parseFloat(req.query.boughtAt);
  let returns = parseFloat(req.query.returns);

  res.send(calculateReturnPercentage(boughtAt, returns));
});

//Endpoint 4: Calculate the Total Return Percentage
app.get('/total-return-percentage', (req, res) => {
  let stock1 = parseFloat(req.query.stock1);
  let stock2 = parseFloat(req.query.stock2);
  let stock3 = parseFloat(req.query.stock3);
  let stock4 = parseFloat(req.query.stock4);

  res.send(calculateTotalReturns(stock1, stock2, stock3, stock4));
});

//Function to identify the status of stock
function identifyStatus(returnPercentage) {
  let result;

  if (returnPercentage > 0) {
    result = 'Profit';
  } else {
    result = 'Loss';
  }

  return result;
}

//Endpoint 5: Identify the Status of Stocks based on their Return Value
app.get('/status', (req, res) => {
  let returnPercentage = parseFloat(req.query.returnPercentage);

  res.send(identifyStatus(returnPercentage));
});

app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`);
});
